// Code generated by MockGen. DO NOT EDIT.
// Source: blockunclesdb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	ethblocks "github.com/cloudfresco/ethblocks"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBlockUncleIntf is a mock of BlockUncleIntf interface
type MockBlockUncleIntf struct {
	ctrl     *gomock.Controller
	recorder *MockBlockUncleIntfMockRecorder
}

// MockBlockUncleIntfMockRecorder is the mock recorder for MockBlockUncleIntf
type MockBlockUncleIntfMockRecorder struct {
	mock *MockBlockUncleIntf
}

// NewMockBlockUncleIntf creates a new mock instance
func NewMockBlockUncleIntf(ctrl *gomock.Controller) *MockBlockUncleIntf {
	mock := &MockBlockUncleIntf{ctrl: ctrl}
	mock.recorder = &MockBlockUncleIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockUncleIntf) EXPECT() *MockBlockUncleIntfMockRecorder {
	return m.recorder
}

// AddBlockUncle mocks base method
func (m *MockBlockUncleIntf) AddBlockUncle(ctx context.Context, tx *sql.Tx, blkuncle *types.Header, BlockID uint) (*ethblocks.BlockUncle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlockUncle", ctx, tx, blkuncle, BlockID)
	ret0, _ := ret[0].(*ethblocks.BlockUncle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBlockUncle indicates an expected call of AddBlockUncle
func (mr *MockBlockUncleIntfMockRecorder) AddBlockUncle(ctx, tx, blkuncle, BlockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlockUncle", reflect.TypeOf((*MockBlockUncleIntf)(nil).AddBlockUncle), ctx, tx, blkuncle, BlockID)
}

// InsertBlockUncle mocks base method
func (m *MockBlockUncleIntf) InsertBlockUncle(ctx context.Context, tx *sql.Tx, blk *ethblocks.BlockUncle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBlockUncle", ctx, tx, blk)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBlockUncle indicates an expected call of InsertBlockUncle
func (mr *MockBlockUncleIntfMockRecorder) InsertBlockUncle(ctx, tx, blk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBlockUncle", reflect.TypeOf((*MockBlockUncleIntf)(nil).InsertBlockUncle), ctx, tx, blk)
}

// GetBlockUncles mocks base method
func (m *MockBlockUncleIntf) GetBlockUncles(ctx context.Context, BlockID uint) ([]*ethblocks.BlockUncle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockUncles", ctx, BlockID)
	ret0, _ := ret[0].([]*ethblocks.BlockUncle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockUncles indicates an expected call of GetBlockUncles
func (mr *MockBlockUncleIntfMockRecorder) GetBlockUncles(ctx, BlockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockUncles", reflect.TypeOf((*MockBlockUncleIntf)(nil).GetBlockUncles), ctx, BlockID)
}
