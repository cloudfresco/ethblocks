// Code generated by MockGen. DO NOT EDIT.
// Source: transaction_receiptsdb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	ethblocks "github.com/cloudfresco/ethblocks"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTransactionReceiptIntf is a mock of TransactionReceiptIntf interface
type MockTransactionReceiptIntf struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionReceiptIntfMockRecorder
}

// MockTransactionReceiptIntfMockRecorder is the mock recorder for MockTransactionReceiptIntf
type MockTransactionReceiptIntfMockRecorder struct {
	mock *MockTransactionReceiptIntf
}

// NewMockTransactionReceiptIntf creates a new mock instance
func NewMockTransactionReceiptIntf(ctrl *gomock.Controller) *MockTransactionReceiptIntf {
	mock := &MockTransactionReceiptIntf{ctrl: ctrl}
	mock.recorder = &MockTransactionReceiptIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionReceiptIntf) EXPECT() *MockTransactionReceiptIntfMockRecorder {
	return m.recorder
}

// AddTransactionReceipt mocks base method
func (m *MockTransactionReceiptIntf) AddTransactionReceipt(ctx context.Context, tx *sql.Tx, receipt *types.Receipt, BlockID uint, BlockNumber uint64, BlockHash string, TransactionID uint) (*ethblocks.TransactionReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransactionReceipt", ctx, tx, receipt, BlockID, BlockNumber, BlockHash, TransactionID)
	ret0, _ := ret[0].(*ethblocks.TransactionReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTransactionReceipt indicates an expected call of AddTransactionReceipt
func (mr *MockTransactionReceiptIntfMockRecorder) AddTransactionReceipt(ctx, tx, receipt, BlockID, BlockNumber, BlockHash, TransactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransactionReceipt", reflect.TypeOf((*MockTransactionReceiptIntf)(nil).AddTransactionReceipt), ctx, tx, receipt, BlockID, BlockNumber, BlockHash, TransactionID)
}

// InsertTransactionReceipt mocks base method
func (m *MockTransactionReceiptIntf) InsertTransactionReceipt(ctx context.Context, tx *sql.Tx, receipt *ethblocks.TransactionReceipt) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransactionReceipt", ctx, tx, receipt)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransactionReceipt indicates an expected call of InsertTransactionReceipt
func (mr *MockTransactionReceiptIntfMockRecorder) InsertTransactionReceipt(ctx, tx, receipt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransactionReceipt", reflect.TypeOf((*MockTransactionReceiptIntf)(nil).InsertTransactionReceipt), ctx, tx, receipt)
}

// GetTransactionReceipts mocks base method
func (m *MockTransactionReceiptIntf) GetTransactionReceipts(ctx context.Context, TransactionID uint) ([]*ethblocks.TransactionReceipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionReceipts", ctx, TransactionID)
	ret0, _ := ret[0].([]*ethblocks.TransactionReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionReceipts indicates an expected call of GetTransactionReceipts
func (mr *MockTransactionReceiptIntfMockRecorder) GetTransactionReceipts(ctx, TransactionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionReceipts", reflect.TypeOf((*MockTransactionReceiptIntf)(nil).GetTransactionReceipts), ctx, TransactionID)
}
