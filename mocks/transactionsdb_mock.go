// Code generated by MockGen. DO NOT EDIT.
// Source: transactionsdb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	ethblocks "github.com/cloudfresco/ethblocks"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTransactionIntf is a mock of TransactionIntf interface
type MockTransactionIntf struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionIntfMockRecorder
}

// MockTransactionIntfMockRecorder is the mock recorder for MockTransactionIntf
type MockTransactionIntfMockRecorder struct {
	mock *MockTransactionIntf
}

// NewMockTransactionIntf creates a new mock instance
func NewMockTransactionIntf(ctrl *gomock.Controller) *MockTransactionIntf {
	mock := &MockTransactionIntf{ctrl: ctrl}
	mock.recorder = &MockTransactionIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionIntf) EXPECT() *MockTransactionIntfMockRecorder {
	return m.recorder
}

// AddTransaction mocks base method
func (m *MockTransactionIntf) AddTransaction(ctx context.Context, tx *sql.Tx, tns *types.Transaction, BlockID uint, BlockNumber uint64) (*ethblocks.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransaction", ctx, tx, tns, BlockID, BlockNumber)
	ret0, _ := ret[0].(*ethblocks.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTransaction indicates an expected call of AddTransaction
func (mr *MockTransactionIntfMockRecorder) AddTransaction(ctx, tx, tns, BlockID, BlockNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransaction", reflect.TypeOf((*MockTransactionIntf)(nil).AddTransaction), ctx, tx, tns, BlockID, BlockNumber)
}

// InsertTransaction mocks base method
func (m *MockTransactionIntf) InsertTransaction(ctx context.Context, tx *sql.Tx, trans *ethblocks.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransaction", ctx, tx, trans)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransaction indicates an expected call of InsertTransaction
func (mr *MockTransactionIntfMockRecorder) InsertTransaction(ctx, tx, trans interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransaction", reflect.TypeOf((*MockTransactionIntf)(nil).InsertTransaction), ctx, tx, trans)
}

// GetBlockTransactions mocks base method
func (m *MockTransactionIntf) GetBlockTransactions(ctx context.Context, BlockID uint) ([]*ethblocks.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockTransactions", ctx, BlockID)
	ret0, _ := ret[0].([]*ethblocks.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockTransactions indicates an expected call of GetBlockTransactions
func (mr *MockTransactionIntfMockRecorder) GetBlockTransactions(ctx, BlockID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockTransactions", reflect.TypeOf((*MockTransactionIntf)(nil).GetBlockTransactions), ctx, BlockID)
}
