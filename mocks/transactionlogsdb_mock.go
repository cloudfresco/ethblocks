// Code generated by MockGen. DO NOT EDIT.
// Source: transactionlogsdb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	ethblocks "github.com/cloudfresco/ethblocks"
	types "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTransactionLogIntf is a mock of TransactionLogIntf interface
type MockTransactionLogIntf struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionLogIntfMockRecorder
}

// MockTransactionLogIntfMockRecorder is the mock recorder for MockTransactionLogIntf
type MockTransactionLogIntfMockRecorder struct {
	mock *MockTransactionLogIntf
}

// NewMockTransactionLogIntf creates a new mock instance
func NewMockTransactionLogIntf(ctrl *gomock.Controller) *MockTransactionLogIntf {
	mock := &MockTransactionLogIntf{ctrl: ctrl}
	mock.recorder = &MockTransactionLogIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionLogIntf) EXPECT() *MockTransactionLogIntfMockRecorder {
	return m.recorder
}

// AddTransactionLog mocks base method
func (m *MockTransactionLogIntf) AddTransactionLog(ctx context.Context, tx *sql.Tx, lg *types.Log, BlockID, TransactionID, TransactionReceiptID uint) (*ethblocks.TransactionLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransactionLog", ctx, tx, lg, BlockID, TransactionID, TransactionReceiptID)
	ret0, _ := ret[0].(*ethblocks.TransactionLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTransactionLog indicates an expected call of AddTransactionLog
func (mr *MockTransactionLogIntfMockRecorder) AddTransactionLog(ctx, tx, lg, BlockID, TransactionID, TransactionReceiptID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransactionLog", reflect.TypeOf((*MockTransactionLogIntf)(nil).AddTransactionLog), ctx, tx, lg, BlockID, TransactionID, TransactionReceiptID)
}

// InsertTransactionLog mocks base method
func (m *MockTransactionLogIntf) InsertTransactionLog(ctx context.Context, tx *sql.Tx, lg *ethblocks.TransactionLog) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InsertTransactionLog", ctx, tx, lg)
}

// InsertTransactionLog indicates an expected call of InsertTransactionLog
func (mr *MockTransactionLogIntfMockRecorder) InsertTransactionLog(ctx, tx, lg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransactionLog", reflect.TypeOf((*MockTransactionLogIntf)(nil).InsertTransactionLog), ctx, tx, lg)
}

// GetTransactionLogs mocks base method
func (m *MockTransactionLogIntf) GetTransactionLogs(ctx context.Context, TransactionReceiptID uint) ([]*ethblocks.TransactionLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionLogs", ctx, TransactionReceiptID)
	ret0, _ := ret[0].([]*ethblocks.TransactionLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionLogs indicates an expected call of GetTransactionLogs
func (mr *MockTransactionLogIntfMockRecorder) GetTransactionLogs(ctx, TransactionReceiptID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionLogs", reflect.TypeOf((*MockTransactionLogIntf)(nil).GetTransactionLogs), ctx, TransactionReceiptID)
}
