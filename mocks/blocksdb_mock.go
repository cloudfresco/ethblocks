// Code generated by MockGen. DO NOT EDIT.
// Source: blocksdb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	ethblocks "github.com/cloudfresco/ethblocks"
	types "github.com/ethereum/go-ethereum/core/types"
	ethclient "github.com/ethereum/go-ethereum/ethclient"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBlockIntf is a mock of BlockIntf interface
type MockBlockIntf struct {
	ctrl     *gomock.Controller
	recorder *MockBlockIntfMockRecorder
}

// MockBlockIntfMockRecorder is the mock recorder for MockBlockIntf
type MockBlockIntfMockRecorder struct {
	mock *MockBlockIntf
}

// NewMockBlockIntf creates a new mock instance
func NewMockBlockIntf(ctrl *gomock.Controller) *MockBlockIntf {
	mock := &MockBlockIntf{ctrl: ctrl}
	mock.recorder = &MockBlockIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockIntf) EXPECT() *MockBlockIntfMockRecorder {
	return m.recorder
}

// AddBlock mocks base method
func (m *MockBlockIntf) AddBlock(ctx context.Context, client *ethclient.Client, block *types.Block) (*ethblocks.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlock", ctx, client, block)
	ret0, _ := ret[0].(*ethblocks.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBlock indicates an expected call of AddBlock
func (mr *MockBlockIntfMockRecorder) AddBlock(ctx, client, block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlock", reflect.TypeOf((*MockBlockIntf)(nil).AddBlock), ctx, client, block)
}

// CreateBlockTransaction mocks base method
func (m *MockBlockIntf) CreateBlockTransaction(ctx context.Context, client *ethclient.Client, tx *sql.Tx, blk *ethblocks.Block, block *types.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlockTransaction", ctx, client, tx, blk, block)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBlockTransaction indicates an expected call of CreateBlockTransaction
func (mr *MockBlockIntfMockRecorder) CreateBlockTransaction(ctx, client, tx, blk, block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlockTransaction", reflect.TypeOf((*MockBlockIntf)(nil).CreateBlockTransaction), ctx, client, tx, blk, block)
}

// InsertBlock mocks base method
func (m *MockBlockIntf) InsertBlock(ctx context.Context, tx *sql.Tx, blk *ethblocks.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBlock", ctx, tx, blk)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBlock indicates an expected call of InsertBlock
func (mr *MockBlockIntfMockRecorder) InsertBlock(ctx, tx, blk interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBlock", reflect.TypeOf((*MockBlockIntf)(nil).InsertBlock), ctx, tx, blk)
}

// GetBlock mocks base method
func (m *MockBlockIntf) GetBlock(ctx context.Context, ID uint) (*ethblocks.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock", ctx, ID)
	ret0, _ := ret[0].(*ethblocks.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockBlockIntfMockRecorder) GetBlock(ctx, ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockBlockIntf)(nil).GetBlock), ctx, ID)
}
