// Code generated by MockGen. DO NOT EDIT.
// Source: transactionlogtopicsdb.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	ethblocks "github.com/cloudfresco/ethblocks"
	common "github.com/ethereum/go-ethereum/common"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTransactionLogTopicIntf is a mock of TransactionLogTopicIntf interface
type MockTransactionLogTopicIntf struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionLogTopicIntfMockRecorder
}

// MockTransactionLogTopicIntfMockRecorder is the mock recorder for MockTransactionLogTopicIntf
type MockTransactionLogTopicIntfMockRecorder struct {
	mock *MockTransactionLogTopicIntf
}

// NewMockTransactionLogTopicIntf creates a new mock instance
func NewMockTransactionLogTopicIntf(ctrl *gomock.Controller) *MockTransactionLogTopicIntf {
	mock := &MockTransactionLogTopicIntf{ctrl: ctrl}
	mock.recorder = &MockTransactionLogTopicIntfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTransactionLogTopicIntf) EXPECT() *MockTransactionLogTopicIntfMockRecorder {
	return m.recorder
}

// AddTransactionLogTopic mocks base method
func (m *MockTransactionLogTopicIntf) AddTransactionLogTopic(ctx context.Context, tx *sql.Tx, s common.Hash, BlockID, TransactionID, TransactionReceiptID, TransactionLogID uint) (*ethblocks.TransactionLogTopic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransactionLogTopic", ctx, tx, s, BlockID, TransactionID, TransactionReceiptID, TransactionLogID)
	ret0, _ := ret[0].(*ethblocks.TransactionLogTopic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTransactionLogTopic indicates an expected call of AddTransactionLogTopic
func (mr *MockTransactionLogTopicIntfMockRecorder) AddTransactionLogTopic(ctx, tx, s, BlockID, TransactionID, TransactionReceiptID, TransactionLogID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransactionLogTopic", reflect.TypeOf((*MockTransactionLogTopicIntf)(nil).AddTransactionLogTopic), ctx, tx, s, BlockID, TransactionID, TransactionReceiptID, TransactionLogID)
}

// InsertTransactionLogTopic mocks base method
func (m *MockTransactionLogTopicIntf) InsertTransactionLogTopic(ctx context.Context, tx *sql.Tx, lt *ethblocks.TransactionLogTopic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTransactionLogTopic", ctx, tx, lt)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertTransactionLogTopic indicates an expected call of InsertTransactionLogTopic
func (mr *MockTransactionLogTopicIntfMockRecorder) InsertTransactionLogTopic(ctx, tx, lt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTransactionLogTopic", reflect.TypeOf((*MockTransactionLogTopicIntf)(nil).InsertTransactionLogTopic), ctx, tx, lt)
}

// GetTransactionLogTopics mocks base method
func (m *MockTransactionLogTopicIntf) GetTransactionLogTopics(ctx context.Context, TransactionLogID uint) ([]*ethblocks.TransactionLogTopic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionLogTopics", ctx, TransactionLogID)
	ret0, _ := ret[0].([]*ethblocks.TransactionLogTopic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionLogTopics indicates an expected call of GetTransactionLogTopics
func (mr *MockTransactionLogTopicIntfMockRecorder) GetTransactionLogTopics(ctx, TransactionLogID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionLogTopics", reflect.TypeOf((*MockTransactionLogTopicIntf)(nil).GetTransactionLogTopics), ctx, TransactionLogID)
}
